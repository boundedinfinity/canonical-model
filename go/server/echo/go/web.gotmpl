package {{ basePath .Config.Package }}

import (
	"{{ .Project.Module }}/model"
	"{{ .Project.Module }}/service"
	"net/http"

	echo "github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	validator "gopkg.in/go-playground/validator.v9"
)

type Server struct {
	e *echo.Echo
	s *service.Server
}

func New(s *service.Server) *Server {
	return &Server{
		s: s,
	}
}

type customValidator struct {
	validator *validator.Validate
}

func (cv *customValidator) Validate(i interface{}) error {
	if err := cv.validator.Struct(i); err != nil {
		return echo.NewHTTPError(http.StatusInternalServerError, err.Error())
	}

	return nil
}

func (t *Server) Serve() error {
	t.e = echo.New()
	t.e.Use(middleware.LoggerWithConfig(middleware.LoggerConfig{
		Format: "method=${method}, uri=${uri}, status=${status}\n",
	}))
	t.e.Validator = &customValidator{validator: validator.New()}

{{ range $pkey, $pval := .Model.Paths -}}
{{- if .Get }}
    t.e.GET("{{ $pkey }}", {{ operationId $pkey "GET" .Post }})
{{- end }}
{{- if .Post }}
    t.e.POST("{{ $pkey }}", {{ operationId $pkey "POST" .Post }})
{{- end }}
{{- if .Put }}
    t.e.PUT("{{ $pkey }}", {{ operationId $pkey "PUT" .Post }})
{{- end }}
{{ end }}

	if err := t.e.Start(":8080"); err != nil {
		return err
	}

	return nil
}


{{ range $pkey, $pval := .Model.Paths -}}
func (t Server) {{- " " -}}
{{ if .Get }}{{ operationId $pkey "GET" .Post }}{{ end -}}
{{- if .Post -}}{{ operationId $pkey "POST" .Post }}{{ end -}}
{{ if .Put }}{{ operationId $pkey "PUT" .Post }}{{ end -}}
    (e echo.Context) error {

    

    return nil
}
{{ end }}

	