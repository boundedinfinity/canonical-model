[[if .CurrNs -]]
package [[ .CurrNs | BASE | SNAKE ]]

[[end -]]
[[if .HasValidation -]]
import (
	"fmt"
[[- range .Properties]]
    [[ $type := RESOLVE . ]]
    [[- if $type.SchemaNs -]]
        [[- $ns := $type.SchemaNs | DIR -]]
        [[- if ne .CurrNs $ns -]]"[[- $ns -]]"[[- end -]]
    [[- end -]]
[[- end]]
)

[[end -]]
[[if .Description -]]
// [[template "NAME" .]] [[ .Description ]]
[[end -]]
type [[template "NAME" .]] struct {
[[- range .Properties]]
    [[template "NAME" .]] [[$type := RESOLVE . -]][[if $type.SchemaNs -]]
        [[- template "ARRAY" . -]][[- template "TYPE_NAME" $type -]]
    [[- else if eq $type.SchemaType "string" -]]
        [[- template "ARRAY" . -]]string    
    [[- else -]]
        // TODO [[$type.SchemaType]]
    [[- end -]]
[[- end]]
}

func (t [[.SchemaNs | BASE | PASCAL ]]) Validate() error {
[[- range .Properties -]]
    [[template "VALIDATE_SWITCH" .]]
[[ end ]]
    return nil
}

[[- define "VALIDATE_SWITCH" -]]
[[ $type := RESOLVE . ]]
[[if $type.SchemaNs -]]
    [[if eq .SchemaType "ref"]]
        if err := t.[[template "NAME" .]].Validate(); err != nil {
            return fmt.Errorf("[[template "NAME" .]]: %w", err)
        }
    [[else if eq .SchemaType "array"]]
        [[if .Items.SchemaType]]
        for i, v := range t.[[template "NAME" .]] {
            if err := v.Validate(); err != nil {
                return fmt.Errorf("[[template "NAME" .]][%v]: %w", i, err)
            }
        }
        [[end]]
    [[else]]
        // TODO [[ template "NAME" . ]]
    [[end]]
[[- end]]
[[- end]]

[[- define "NAME" -]]
    [[- if .IsPublic -]]
        [[ .Name | BASE | PASCAL ]]
    [[- else -]]
        [[ .Name | BASE | CAMEL ]]
    [[- end -]]
[[- end -]]

[[- define "TYPE_NAME" -]]
    [[- if .SchemaNs -]]
        [[- if ne (.SchemaNs | DIR) .CurrNs -]][[- .SchemaNs | DIR | BASE -]].[[- end -]]
        [[- .SchemaNs | BASE | PASCAL -]]
    [[- else -]]
        [[- if eq .SchemaType "string" -]]string[[- end -]]
    [[- end -]]
[[- end ]]

[[- define "ARRAY" -]]
[[- if eq .SchemaType "array" -]][][[- end -]]
[[- end]]