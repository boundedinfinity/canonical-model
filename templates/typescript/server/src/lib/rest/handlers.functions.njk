import type { Request, Response, Application } from "express";
import { JsonSerializer, throwError } from 'typescript-json-serializer';
import { getConnection } from "typeorm";
import cors from "cors";
{% for fn in fns %}
import { {{ fn.input | idType }} } from '$lib/model/{{ fn.input | idType }}.class'
import { {{ fn.output | idType }} } from '$lib/model/{{ fn.output | idType }}.class'
{%- endfor %}

{% for fn in fns %}
import { {{ fn.name | normalizeName }}Handler } from '$lib/handlers/{{ fn.name | normalizeName }}.handler'
{%- endfor %}

const serializer = new JsonSerializer({
    errorCallback: throwError,
});

export async function handleRest(app: Application, options) {
    app.use(cors(options))
    // const connection = await getConnection();
    const connection = null;

    app.get("/", (req: Request, res: Response): void => {
        res.send("Hello Typescript with Node.js!");
    });

    {%- for fn in fns %}
    app.post("/{{ fn.name }}", async (req: Request, res: Response) => {
        console.log(`received {{ fn.input | idType }} ${req.body}`);
        const response = new {{ fn.output | idType }}()
        let status: number = 200

        try {
            const request = serializer.deserialize(req.body, {{ fn.input | idType }}) as {{ fn.input | idType }};
            await {{ fn.name | normalizeName }}Handler(request, response, connection)
        } catch(error) {
            status = 500
            response.errors.push(error)
        }
        
        const json = serializer.serialize(response);
        res.statusCode = status
        res.send(json)
    })
    {%- endfor %}
}
