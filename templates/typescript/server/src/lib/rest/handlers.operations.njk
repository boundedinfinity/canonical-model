import type { Request, Response, Application } from "express";
import { getConnection } from "typeorm";
import cors from "cors";
import { instanceToPlain, plainToInstance } from 'class-transformer';
{% for fn in fns %}
import { {{ fn.input | idType }} } from '$lib/model/{{ fn.input | idType }}.class'
import { {{ fn.output | idType }} } from '$lib/model/{{ fn.output | idType }}.class'
{%- endfor %}

{% for fn in fns %}
import { {{ fn.name | normalizeName }}Handler } from '$lib/handlers/{{ fn.name | normalizeName }}.handler'
{%- endfor %}

export async function handleRest(app: Application, options) {
    app.use(cors(options))
    // const connection = await getConnection();
    const connection = null;

    app.get("/", (req: Request, res: Response): void => {
        res.send("Hello Typescript with Node.js!");
    });
    {% for fn in fns %}
    app.post("/{{ fn.name }}", async (req: Request, res: Response) => {
        console.log(`received {{ fn.input | idType }} ${req.body}`);
        const response = new {{ fn.output | idType }}()
        let status: number = 200

        try {
            const request = plainToInstance({{ fn.input | idType }}, req.body);
            await {{ fn.name | normalizeName }}Handler(request, response, connection)
        } catch(error) {
            status = 500
            response.errors.push(`${error}`)
        }
        
        const json = instanceToPlain(response);
        res.statusCode = status
        res.json(json)
    })
    {% endfor %}
}
