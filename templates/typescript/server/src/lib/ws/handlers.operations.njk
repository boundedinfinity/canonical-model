import { Server } from "socket.io";
import { instanceToPlain, plainToInstance } from 'class-transformer';
import { getConnection } from "typeorm";


{% for fn in fns %}
import { {{ fn.input | idType }} } from '$lib/model/{{ fn.input | idType }}.class'
import { {{ fn.output | idType }} } from '$lib/model/{{ fn.output | idType }}.class'
{%- endfor %}

{% for fn in fns %}
import { {{ fn.name | normalizeName }}Handler } from '$lib/handlers/{{ fn.name | normalizeName }}.handler'
{%- endfor %}

export function handleWs(io: Server) {
    io.on("connection", async (socket) => {
        console.log("WS connection");
        // const connection = await getConnection();
        const connection = null;

        {%- for fn in fns %}        
        socket.on('{{ fn.input | idType }}', async (args) => {
            console.log(`received {{ fn.input | idType }} ${(args)}`);
            const response = new {{ fn.output | idType }}()
            try {
                const request = plainToInstance({{ fn.input | idType }}, args);
                await {{ fn.name | normalizeName }}Handler(request, response, connection)
            } catch(error) {
                response.errors.push(`${error}`)
            }
            
            let json = JSON.stringify(instanceToPlain(response));
            io.emit('{{ fn.output | idType }}', json)
        });
        {%- endfor %}
    });
}