[[- range .Properties]]
    [[- $type := RESOLVE . -]]
    [[- if $type.SchemaNs -]]
        [[- $rel := PATH_REL .CurrNs $type.SchemaNs -]]
        [[- $dir :=  $rel | DIR -]]
        [[- $base := $rel | BASE | PASCAL -]]
import { [[$base]], validate[[$base]] } from '[[$dir]]/[[$base]].object.model';
    [[end]]
[[end]]

[[if .Description -]]
/** 
 * [[ .Description ]]
 */
[[end -]]
export class [[template "NAME" .]] {
[[- range .Properties]]    
    [[template "PROP_NAME" .]] : [[template "TYPE_SWITCH" .]];
[[- end]]
}

/**
 * Validate validates the [[template "NAME" .]] type.
 *
 * @param v [[template "NAME" .]]
 *
 * @throws an error if validation fails
 */
export function validate(t: [[template "NAME" .]]) {
[[- range .Properties -]]
    [[template "VALIDATE_SWITCH" .]]
[[ end ]]
}

[[- define "VALIDATE_SWITCH" -]]
    [[- $type := RESOLVE . -]]
    [[- if $type.SchemaNs -]]
        [[if eq .SchemaType "ref"]]
    validate[[template "TYPE_SWITCH" .Ref -]](t.[[template "PROP_NAME" .]]);
            [[else if eq .SchemaType "array"]]
    for(const v in t.[[template "PROP_NAME" .]]) {
        validate[[template "TYPE_SWITCH" .Items]](v);
    }
        [[- end -]]
    [[- else -]]
        // TODO [[ template "NAME" . ]]
    [[end]]
[[- end]]

[[- define "NAME" -]]
    [[ .Name | BASE | PASCAL ]]
[[- end ]]

[[- define "PROP_NAME" -]]
    [[ .Name | BASE | CAMEL ]]
[[- end ]]

[[- define "TYPE_SWITCH" -]]
    [[- $type := RESOLVE . -]]
    [[- if $type.SchemaNs -]]
        [[- $type.SchemaNs | BASE | PASCAL -]][[template "ARRAY" . -]]
    [[- else if eq $type.SchemaType "string" -]]
        string[[template "ARRAY" . -]]
    [[- else -]]
        // TODO [[$type.SchemaType]]
    [[- end -]]
[[- end]]

[[- define "ARRAY" -]]
[[- if eq .SchemaType "array" -]][][[- end -]]
[[- end]]