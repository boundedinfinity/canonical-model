import ioClient from "socket.io-client";
import { instanceToPlain, plainToInstance } from 'class-transformer';
import { writable } from "svelte/store";

{%- for fn in fns %}
import { {{ fn.input | idType }} } from '$lib/model/{{ fn.input | idType }}.class'
import { {{ fn.output | idType }} } from '$lib/model/{{ fn.output | idType }}.class'
{%- endfor %}

const ENDPOINT = "http://localhost:3001";
const socket = ioClient(ENDPOINT, { secure: false });

{% for fn in fns %}
function {{ fn.name | normalizeName }}(request: {{ fn.input | idType }}) {
    const name = {{ fn.input | idType }}.constructor.name
    const data = JSON.stringify(instanceToPlain(request));

    console.log(`sending ${name}: ${data}`)
    socket.emit(name, data)
}
{% endfor %}

{% for fn in fns -%}
const {{ fn.name | normalizeName | lcFirst }}Store = writable<{{ fn.output | idType }}>(null);
{% endfor %}

{%- for fn in fns %}
socket.on('{{ fn.output | idType }}', async (args) => {
    console.log(`received {{ fn.output | idType }} ${args}`);
    const response = plainToInstance({{ fn.output | idType }}, args);
    {{ fn.name | normalizeName | lcFirst }}Store.set(response)
});
{% endfor %}
export {
    {%- for fn in fns %}
    {{ fn.name | normalizeName | lcFirst }}Store,
    {%- endfor %}

    {%- for fn in fns %}
    {{ fn.name | normalizeName }},
    {%- endfor %}
}