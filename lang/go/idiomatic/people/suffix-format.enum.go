//************************************************************************************
//*                                                                                  *
//* ===== DO NOT EDIT =====                                                          *
//* Manual changes will be overwritten.                                              *
//* Generated by github.com/boundedinfinity/enumer                                   *
//*                                                                                  *
//************************************************************************************

package people

import (
	"database/sql/driver"
	"fmt"

	"github.com/boundedinfinity/enumer"
)

type SuffixFormat string

// /////////////////////////////////////////////////////////////////
//  SuffixFormat Stringer implemenation
// /////////////////////////////////////////////////////////////////

func (t SuffixFormat) String() string {
	return string(t)
}

// /////////////////////////////////////////////////////////////////
//  SuffixFormat JSON marshal/unmarshal implemenation
// /////////////////////////////////////////////////////////////////

func (t SuffixFormat) MarshalJSON() ([]byte, error) {
	return enumer.MarshalJSON(t)
}

func (t *SuffixFormat) UnmarshalJSON(data []byte) error {
	return enumer.UnmarshalJSON(data, t, SuffixFormats.Parse)
}

// /////////////////////////////////////////////////////////////////
//  SuffixFormat YAML marshal/unmarshal implemenation
// /////////////////////////////////////////////////////////////////

func (t SuffixFormat) MarshalYAML() (interface{}, error) {
	return enumer.MarshalYAML(t)
}

func (t *SuffixFormat) UnmarshalYAML(unmarshal func(interface{}) error) error {
	return enumer.UnmarshalYAML(unmarshal, t, SuffixFormats.Parse)
}

// /////////////////////////////////////////////////////////////////
//  SuffixFormat SQL Database marshal/unmarshal implemenation
// /////////////////////////////////////////////////////////////////

func (t SuffixFormat) Value() (driver.Value, error) {
	return enumer.Value(t)
}

func (t *SuffixFormat) Scan(value interface{}) error {
	return enumer.Scan(value, t, SuffixFormats.Parse)
}

// /////////////////////////////////////////////////////////////////
//
//  Enumeration
//
// /////////////////////////////////////////////////////////////////

type suffixFormats struct {
	Full         SuffixFormat
	Abbreviation SuffixFormat
	Values       []SuffixFormat
	Err          error
}

var SuffixFormats = suffixFormats{
	Full:         SuffixFormat("Full"),
	Abbreviation: SuffixFormat("Abbreviation"),
	Err:          fmt.Errorf("invalid SuffixFormat"),
}

func init() {
	SuffixFormats.Values = []SuffixFormat{
		SuffixFormats.Full,
		SuffixFormats.Abbreviation,
	}
}

func (t suffixFormats) newErr(a any, values ...SuffixFormat) error {
	return fmt.Errorf(
		"invalid %w value '%v'. Must be one of %v",
		SuffixFormats.Err,
		a,
		enumer.Join(values, ", "),
	)
}

func (t suffixFormats) ParseFrom(v string, values ...SuffixFormat) (SuffixFormat, error) {
	var found SuffixFormat
	var ok bool

	for _, value := range values {
		if enumer.IsEq[string, SuffixFormat](v)(value) {
			found = value
			ok = true
			break
		}
	}

	if !ok {
		return found, t.newErr(v, values...)
	}

	return found, nil
}

func (t suffixFormats) Parse(v string) (SuffixFormat, error) {
	return t.ParseFrom(v, SuffixFormats.Values...)
}

func (t suffixFormats) IsFrom(v string, values ...SuffixFormat) bool {
	for _, value := range values {
		if enumer.IsEq[string, SuffixFormat](v)(value) {
			return true
		}
	}
	return false
}

func (t suffixFormats) Is(v string) bool {
	return t.IsFrom(v, SuffixFormats.Values...)
}
