//************************************************************************************
//*                                                                                  *
//* ===== DO NOT EDIT =====                                                          *
//* Manual changes will be overwritten.                                              *
//* Generated by github.com/boundedinfinity/enumer                                   *
//*                                                                                  *
//************************************************************************************

package hardware

import (
	"database/sql/driver"
	"encoding/xml"
	"fmt"

	"github.com/boundedinfinity/enumer"
)

type ConnectorType string

// /////////////////////////////////////////////////////////////////
//  ConnectorType Stringer implemenation
// /////////////////////////////////////////////////////////////////

func (t ConnectorType) String() string {
	return string(t)
}

// /////////////////////////////////////////////////////////////////
//  ConnectorType JSON marshal/unmarshal implemenation
// /////////////////////////////////////////////////////////////////

func (t ConnectorType) MarshalJSON() ([]byte, error) {
	return enumer.MarshalJSON(t)
}

func (t *ConnectorType) UnmarshalJSON(data []byte) error {
	return enumer.UnmarshalJSON(data, t, ConnectorTypes.Parse)
}

// /////////////////////////////////////////////////////////////////
//  ConnectorType YAML marshal/unmarshal implemenation
// /////////////////////////////////////////////////////////////////

func (t ConnectorType) MarshalYAML() (interface{}, error) {
	return enumer.MarshalYAML(t)
}

func (t *ConnectorType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	return enumer.UnmarshalYAML(unmarshal, t, ConnectorTypes.Parse)
}

// /////////////////////////////////////////////////////////////////
//  ConnectorType XML marshal/unmarshal implemenation
// /////////////////////////////////////////////////////////////////

func (t ConnectorType) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return enumer.MarshalXML(t, e, start)
}

func (t *ConnectorType) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	return enumer.UnmarshalXML(t, ConnectorTypes.Parse, d, start)
}

// /////////////////////////////////////////////////////////////////
//  ConnectorType SQL Database marshal/unmarshal implemenation
// /////////////////////////////////////////////////////////////////

func (t ConnectorType) Value() (driver.Value, error) {
	return enumer.Value(t)
}

func (t *ConnectorType) Scan(value interface{}) error {
	return enumer.Scan(value, t, ConnectorTypes.Parse)
}

// /////////////////////////////////////////////////////////////////
//
//  Enumeration
//
// /////////////////////////////////////////////////////////////////

type connectorTypes struct {
	USBA         ConnectorType
	USBMicroA    ConnectorType
	USBB         ConnectorType
	USBMicroB    ConnectorType
	USBMiniB4Pin ConnectorType
	USBMiniB5Pin ConnectorType
	USBMiniB     ConnectorType
	USBC         ConnectorType
	USB30A       ConnectorType
	USB30B       ConnectorType
	USB30MicroB  ConnectorType
	Values       []ConnectorType
	Err          error
}

var ConnectorTypes = connectorTypes{
	USBA:         ConnectorType("usb-a"),
	USBMicroA:    ConnectorType("usb-micro-a"),
	USBB:         ConnectorType("usb-b"),
	USBMicroB:    ConnectorType("usb-micro-b"),
	USBMiniB4Pin: ConnectorType("usb-mini-b-4-pin"),
	USBMiniB5Pin: ConnectorType("usb-mini-b-5-pin"),
	USBMiniB:     ConnectorType("usb-mini-b"),
	USBC:         ConnectorType("usb-c"),
	USB30A:       ConnectorType("usb-3.0-a"),
	USB30B:       ConnectorType("usb-3.0-b"),
	USB30MicroB:  ConnectorType("usb-3.0-micro-b"),
	Err:          fmt.Errorf("invalid ConnectorType"),
}

func init() {
	ConnectorTypes.Values = []ConnectorType{
		ConnectorTypes.USBA,
		ConnectorTypes.USBMicroA,
		ConnectorTypes.USBB,
		ConnectorTypes.USBMicroB,
		ConnectorTypes.USBMiniB4Pin,
		ConnectorTypes.USBMiniB5Pin,
		ConnectorTypes.USBMiniB,
		ConnectorTypes.USBC,
		ConnectorTypes.USB30A,
		ConnectorTypes.USB30B,
		ConnectorTypes.USB30MicroB,
	}
}

func (t connectorTypes) newErr(a any, values ...ConnectorType) error {
	return fmt.Errorf(
		"invalid %w value '%v'. Must be one of %v",
		ConnectorTypes.Err,
		a,
		enumer.Join(values, ", "),
	)
}

func (t connectorTypes) ParseFrom(v string, values ...ConnectorType) (ConnectorType, error) {
	var found ConnectorType
	var ok bool

	for _, value := range values {
		if enumer.IsEq[string, ConnectorType](v)(value) {
			found = value
			ok = true
			break
		}
	}

	if !ok {
		return found, t.newErr(v, values...)
	}

	return found, nil
}

func (t connectorTypes) Parse(v string) (ConnectorType, error) {
	return t.ParseFrom(v, ConnectorTypes.Values...)
}

func (t connectorTypes) IsFrom(v string, values ...ConnectorType) bool {
	for _, value := range values {
		if enumer.IsEq[string, ConnectorType](v)(value) {
			return true
		}
	}
	return false
}

func (t connectorTypes) Is(v string) bool {
	return t.IsFrom(v, ConnectorTypes.Values...)
}
