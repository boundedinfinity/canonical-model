//************************************************************************************
//*                                                                                  *
//* ===== DO NOT EDIT =====                                                          *
//* Manual changes will be overwritten.                                              *
//* Generated by github.com/boundedinfinity/enumer                                   *
//*                                                                                  *
//************************************************************************************

package phone

import (
	"database/sql/driver"
	"fmt"

	"github.com/boundedinfinity/enumer"
)

type NanpPhoneSeparatorFormat string

// /////////////////////////////////////////////////////////////////
//  NanpPhoneSeparatorFormat Stringer implemenation
// /////////////////////////////////////////////////////////////////

func (t NanpPhoneSeparatorFormat) String() string {
	return string(t)
}

// /////////////////////////////////////////////////////////////////
//  NanpPhoneSeparatorFormat JSON marshal/unmarshal implemenation
// /////////////////////////////////////////////////////////////////

func (t NanpPhoneSeparatorFormat) MarshalJSON() ([]byte, error) {
	return enumer.MarshalJSON(t)
}

func (t *NanpPhoneSeparatorFormat) UnmarshalJSON(data []byte) error {
	return enumer.UnmarshalJSON(data, t, NanpPhoneSeparatorFormats.Parse)
}

// /////////////////////////////////////////////////////////////////
//  NanpPhoneSeparatorFormat YAML marshal/unmarshal implemenation
// /////////////////////////////////////////////////////////////////

func (t NanpPhoneSeparatorFormat) MarshalYAML() (interface{}, error) {
	return enumer.MarshalYAML(t)
}

func (t *NanpPhoneSeparatorFormat) UnmarshalYAML(unmarshal func(interface{}) error) error {
	return enumer.UnmarshalYAML(unmarshal, t, NanpPhoneSeparatorFormats.Parse)
}

// /////////////////////////////////////////////////////////////////
//  NanpPhoneSeparatorFormat SQL Database marshal/unmarshal implemenation
// /////////////////////////////////////////////////////////////////

func (t NanpPhoneSeparatorFormat) Value() (driver.Value, error) {
	return enumer.Value(t)
}

func (t *NanpPhoneSeparatorFormat) Scan(value interface{}) error {
	return enumer.Scan(value, t, NanpPhoneSeparatorFormats.Parse)
}

// /////////////////////////////////////////////////////////////////
//
//  Enumeration
//
// /////////////////////////////////////////////////////////////////

type nanpPhoneSeparatorFormats struct {
	DotSeparated         NanpPhoneSeparatorFormat
	DashSeparated        NanpPhoneSeparatorFormat
	ParenthesesAndDashes NanpPhoneSeparatorFormat
	None                 NanpPhoneSeparatorFormat
	Values               []NanpPhoneSeparatorFormat
	Err                  error
}

var NanpPhoneSeparatorFormats = nanpPhoneSeparatorFormats{
	DotSeparated:         NanpPhoneSeparatorFormat("dot-separated"),
	DashSeparated:        NanpPhoneSeparatorFormat("dash-separated"),
	ParenthesesAndDashes: NanpPhoneSeparatorFormat("parentheses-and-dashes"),
	None:                 NanpPhoneSeparatorFormat("none"),
	Err:                  fmt.Errorf("invalid NanpPhoneSeparatorFormat"),
}

func init() {
	NanpPhoneSeparatorFormats.Values = []NanpPhoneSeparatorFormat{
		NanpPhoneSeparatorFormats.DotSeparated,
		NanpPhoneSeparatorFormats.DashSeparated,
		NanpPhoneSeparatorFormats.ParenthesesAndDashes,
		NanpPhoneSeparatorFormats.None,
	}
}

func (t nanpPhoneSeparatorFormats) newErr(a any, values ...NanpPhoneSeparatorFormat) error {
	return fmt.Errorf(
		"invalid %w value '%v'. Must be one of %v",
		NanpPhoneSeparatorFormats.Err,
		a,
		enumer.Join(values, ", "),
	)
}

func (t nanpPhoneSeparatorFormats) ParseFrom(v string, values ...NanpPhoneSeparatorFormat) (NanpPhoneSeparatorFormat, error) {
	var found NanpPhoneSeparatorFormat
	var ok bool

	for _, value := range values {
		if enumer.IsEq[string, NanpPhoneSeparatorFormat](v)(value) {
			found = value
			ok = true
			break
		}
	}

	if !ok {
		return found, t.newErr(v, values...)
	}

	return found, nil
}

func (t nanpPhoneSeparatorFormats) Parse(v string) (NanpPhoneSeparatorFormat, error) {
	return t.ParseFrom(v, NanpPhoneSeparatorFormats.Values...)
}

func (t nanpPhoneSeparatorFormats) IsFrom(v string, values ...NanpPhoneSeparatorFormat) bool {
	for _, value := range values {
		if enumer.IsEq[string, NanpPhoneSeparatorFormat](v)(value) {
			return true
		}
	}
	return false
}

func (t nanpPhoneSeparatorFormats) Is(v string) bool {
	return t.IsFrom(v, NanpPhoneSeparatorFormats.Values...)
}
