//************************************************************************************
//*                                                                                  *
//* ===== DO NOT EDIT =====                                                          *
//* Manual changes will be overwritten.                                              *
//* Generated by github.com/boundedinfinity/enumer                                   *
//*                                                                                  *
//************************************************************************************

package phone

import (
	"database/sql/driver"
	"fmt"

	"github.com/boundedinfinity/enumer"
)

// /////////////////////////////////////////////////////////////////
//  NapaPhoneFormat Stringer implemenation
// /////////////////////////////////////////////////////////////////

func (t NapaPhoneFormat) String() string {
	return string(t)
}

// /////////////////////////////////////////////////////////////////
//  NapaPhoneFormat JSON marshal/unmarshal implemenation
// /////////////////////////////////////////////////////////////////

func (t NapaPhoneFormat) MarshalJSON() ([]byte, error) {
	return enumer.MarshalJSON(t)
}

func (t *NapaPhoneFormat) UnmarshalJSON(data []byte) error {
	return enumer.UnmarshalJSON(data, t, NapaPhoneFormats.Parse)
}

// /////////////////////////////////////////////////////////////////
//  NapaPhoneFormat YAML marshal/unmarshal implemenation
// /////////////////////////////////////////////////////////////////

func (t NapaPhoneFormat) MarshalYAML() (interface{}, error) {
	return enumer.MarshalYAML(t)
}

func (t *NapaPhoneFormat) UnmarshalYAML(unmarshal func(interface{}) error) error {
	return enumer.UnmarshalYAML(unmarshal, t, NapaPhoneFormats.Parse)
}

// /////////////////////////////////////////////////////////////////
//  NapaPhoneFormat SQL Database marshal/unmarshal implemenation
// /////////////////////////////////////////////////////////////////

func (t NapaPhoneFormat) Value() (driver.Value, error) {
	return enumer.Value(t)
}

func (t *NapaPhoneFormat) Scan(value interface{}) error {
	return enumer.Scan(value, t, NapaPhoneFormats.Parse)
}

// /////////////////////////////////////////////////////////////////
//
//  Enumeration
//
// /////////////////////////////////////////////////////////////////

var NapaPhoneFormats = struct {
	napaPhoneFormats
	Err    error
	Values []NapaPhoneFormat
}{
	napaPhoneFormats: napaPhoneFormats{
		Full:   NapaPhoneFormat("Full"),
		Common: NapaPhoneFormat("Common"),
	},
	Err: fmt.Errorf("invalid NapaPhoneFormat"),
}

func init() {
	NapaPhoneFormats.Values = []NapaPhoneFormat{
		NapaPhoneFormats.Full,
		NapaPhoneFormats.Common,
	}
}

func (t napaPhoneFormats) newErr(a any, values ...NapaPhoneFormat) error {
	return fmt.Errorf(
		"invalid %w value '%v'. Must be one of %v",
		NapaPhoneFormats.Err,
		a,
		enumer.Join(values, ", "),
	)
}

func (t napaPhoneFormats) ParseFrom(v string, values ...NapaPhoneFormat) (NapaPhoneFormat, error) {
	var found NapaPhoneFormat
	var ok bool

	for _, value := range values {
		if enumer.IsEq[string, NapaPhoneFormat](v)(value) {
			found = value
			ok = true
			break
		}
	}

	if !ok {
		return found, t.newErr(v, values...)
	}

	return found, nil
}

func (t napaPhoneFormats) Parse(v string) (NapaPhoneFormat, error) {
	return t.ParseFrom(v, NapaPhoneFormats.Values...)
}

func (t napaPhoneFormats) IsFrom(v string, values ...NapaPhoneFormat) bool {
	for _, value := range values {
		if enumer.IsEq[string, NapaPhoneFormat](v)(value) {
			return true
		}
	}
	return false
}

func (t napaPhoneFormats) Is(v string) bool {
	return t.IsFrom(v, NapaPhoneFormats.Values...)
}
