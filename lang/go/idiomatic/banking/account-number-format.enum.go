//************************************************************************************
//*                                                                                  *
//* ===== DO NOT EDIT =====                                                          *
//* Manual changes will be overwritten.                                              *
//* Generated by github.com/boundedinfinity/enumer                                   *
//*                                                                                  *
//************************************************************************************

package banking

import (
	"database/sql/driver"
	"encoding/xml"
	"fmt"

	"github.com/boundedinfinity/enumer"
)

type AccountNumberFormat string

// /////////////////////////////////////////////////////////////////
//  AccountNumberFormat Stringer implemenation
// /////////////////////////////////////////////////////////////////

func (t AccountNumberFormat) String() string {
	return string(t)
}

// /////////////////////////////////////////////////////////////////
//  AccountNumberFormat JSON marshal/unmarshal implemenation
// /////////////////////////////////////////////////////////////////

func (t AccountNumberFormat) MarshalJSON() ([]byte, error) {
	return enumer.MarshalJSON(t)
}

func (t *AccountNumberFormat) UnmarshalJSON(data []byte) error {
	return enumer.UnmarshalJSON(data, t, AccountNumberFormats.Parse)
}

// /////////////////////////////////////////////////////////////////
//  AccountNumberFormat YAML marshal/unmarshal implemenation
// /////////////////////////////////////////////////////////////////

func (t AccountNumberFormat) MarshalYAML() (interface{}, error) {
	return enumer.MarshalYAML(t)
}

func (t *AccountNumberFormat) UnmarshalYAML(unmarshal func(interface{}) error) error {
	return enumer.UnmarshalYAML(unmarshal, t, AccountNumberFormats.Parse)
}

// /////////////////////////////////////////////////////////////////
//  AccountNumberFormat XML marshal/unmarshal implemenation
// /////////////////////////////////////////////////////////////////

func (t AccountNumberFormat) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return enumer.MarshalXML(t, e, start)
}

func (t *AccountNumberFormat) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	return enumer.UnmarshalXML(t, AccountNumberFormats.Parse, d, start)
}

// /////////////////////////////////////////////////////////////////
//  AccountNumberFormat SQL Database marshal/unmarshal implemenation
// /////////////////////////////////////////////////////////////////

func (t AccountNumberFormat) Value() (driver.Value, error) {
	return enumer.Value(t)
}

func (t *AccountNumberFormat) Scan(value interface{}) error {
	return enumer.Scan(value, t, AccountNumberFormats.Parse)
}

// /////////////////////////////////////////////////////////////////
//
//  Enumeration
//
// /////////////////////////////////////////////////////////////////

type accountNumberFormats struct {
	NoSpace     AccountNumberFormat
	SpaceAfter3 AccountNumberFormat
	SpaceAfter4 AccountNumberFormat
	Values      []AccountNumberFormat
	Err         error
}

var AccountNumberFormats = accountNumberFormats{
	NoSpace:     AccountNumberFormat("no-space"),
	SpaceAfter3: AccountNumberFormat("space-after-3"),
	SpaceAfter4: AccountNumberFormat("space-after-4"),
	Err:         fmt.Errorf("invalid AccountNumberFormat"),
}

func init() {
	AccountNumberFormats.Values = []AccountNumberFormat{
		AccountNumberFormats.NoSpace,
		AccountNumberFormats.SpaceAfter3,
		AccountNumberFormats.SpaceAfter4,
	}
}

func (t accountNumberFormats) newErr(a any, values ...AccountNumberFormat) error {
	return fmt.Errorf(
		"invalid %w value '%v'. Must be one of %v",
		AccountNumberFormats.Err,
		a,
		enumer.Join(values, ", "),
	)
}

func (t accountNumberFormats) ParseFrom(v string, values ...AccountNumberFormat) (AccountNumberFormat, error) {
	var found AccountNumberFormat
	var ok bool

	for _, value := range values {
		if enumer.IsEq[string, AccountNumberFormat](v)(value) {
			found = value
			ok = true
			break
		}
	}

	if !ok {
		return found, t.newErr(v, values...)
	}

	return found, nil
}

func (t accountNumberFormats) Parse(v string) (AccountNumberFormat, error) {
	return t.ParseFrom(v, AccountNumberFormats.Values...)
}

func (t accountNumberFormats) IsFrom(v string, values ...AccountNumberFormat) bool {
	for _, value := range values {
		if enumer.IsEq[string, AccountNumberFormat](v)(value) {
			return true
		}
	}
	return false
}

func (t accountNumberFormats) Is(v string) bool {
	return t.IsFrom(v, AccountNumberFormats.Values...)
}
