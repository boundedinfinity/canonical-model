//************************************************************************************
//*                                                                                  *
//* ===== DO NOT EDIT =====                                                          *
//* Manual changes will be overwritten.                                              *
//* Generated by github.com/boundedinfinity/enumer                                   *
//*                                                                                  *
//************************************************************************************

package currency

import (
	"database/sql/driver"
	"encoding/xml"
	"fmt"

	"github.com/boundedinfinity/enumer"
)

type CurrencyName string

// /////////////////////////////////////////////////////////////////
//  CurrencyName Stringer implemenation
// /////////////////////////////////////////////////////////////////

func (t CurrencyName) String() string {
	return string(t)
}

// /////////////////////////////////////////////////////////////////
//  CurrencyName JSON marshal/unmarshal implemenation
// /////////////////////////////////////////////////////////////////

func (t CurrencyName) MarshalJSON() ([]byte, error) {
	return enumer.MarshalJSON(t)
}

func (t *CurrencyName) UnmarshalJSON(data []byte) error {
	return enumer.UnmarshalJSON(data, t, CurrencyNames.Parse)
}

// /////////////////////////////////////////////////////////////////
//  CurrencyName YAML marshal/unmarshal implemenation
// /////////////////////////////////////////////////////////////////

func (t CurrencyName) MarshalYAML() (interface{}, error) {
	return enumer.MarshalYAML(t)
}

func (t *CurrencyName) UnmarshalYAML(unmarshal func(interface{}) error) error {
	return enumer.UnmarshalYAML(unmarshal, t, CurrencyNames.Parse)
}

// /////////////////////////////////////////////////////////////////
//  CurrencyName XML marshal/unmarshal implemenation
// /////////////////////////////////////////////////////////////////

func (t CurrencyName) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return enumer.MarshalXML(t, e, start)
}

func (t *CurrencyName) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	return enumer.UnmarshalXML(t, CurrencyNames.Parse, d, start)
}

// /////////////////////////////////////////////////////////////////
//  CurrencyName SQL Database marshal/unmarshal implemenation
// /////////////////////////////////////////////////////////////////

func (t CurrencyName) Value() (driver.Value, error) {
	return enumer.Value(t)
}

func (t *CurrencyName) Scan(value interface{}) error {
	return enumer.Scan(value, t, CurrencyNames.Parse)
}

// /////////////////////////////////////////////////////////////////
//
//  Enumeration
//
// /////////////////////////////////////////////////////////////////

type currencyNames struct {
	UnitedStatesDollar CurrencyName
	Euro               CurrencyName
	Values             []CurrencyName
	Err                error
}

var CurrencyNames = currencyNames{
	UnitedStatesDollar: CurrencyName("United States Dollar"),
	Euro:               CurrencyName("Euro"),
	Err:                fmt.Errorf("invalid CurrencyName"),
}

func init() {
	CurrencyNames.Values = []CurrencyName{
		CurrencyNames.UnitedStatesDollar,
		CurrencyNames.Euro,
	}
}

func (t currencyNames) newErr(a any, values ...CurrencyName) error {
	return fmt.Errorf(
		"invalid %w value '%v'. Must be one of %v",
		CurrencyNames.Err,
		a,
		enumer.Join(values, ", "),
	)
}

func (t currencyNames) ParseFrom(v string, values ...CurrencyName) (CurrencyName, error) {
	var found CurrencyName
	var ok bool

	for _, value := range values {
		if enumer.IsEq[string, CurrencyName](v)(value) {
			found = value
			ok = true
			break
		}
	}

	if !ok {
		return found, t.newErr(v, values...)
	}

	return found, nil
}

func (t currencyNames) Parse(v string) (CurrencyName, error) {
	return t.ParseFrom(v, CurrencyNames.Values...)
}

func (t currencyNames) IsFrom(v string, values ...CurrencyName) bool {
	for _, value := range values {
		if enumer.IsEq[string, CurrencyName](v)(value) {
			return true
		}
	}
	return false
}

func (t currencyNames) Is(v string) bool {
	return t.IsFrom(v, CurrencyNames.Values...)
}
