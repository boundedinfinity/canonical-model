//************************************************************************************
//*                                                                                  *
//* ===== DO NOT EDIT =====                                                          *
//* Manual changes will be overwritten.                                              *
//* Generated by github.com/boundedinfinity/enumer                                   *
//*                                                                                  *
//************************************************************************************

package vehicle

import (
	"database/sql/driver"
	"fmt"

	"github.com/boundedinfinity/enumer"
)

type WmiRegion string

// /////////////////////////////////////////////////////////////////
//  WmiRegion Stringer implemenation
// /////////////////////////////////////////////////////////////////

func (t WmiRegion) String() string {
	return string(t)
}

// /////////////////////////////////////////////////////////////////
//  WmiRegion JSON marshal/unmarshal implemenation
// /////////////////////////////////////////////////////////////////

func (t WmiRegion) MarshalJSON() ([]byte, error) {
	return enumer.MarshalJSON(t)
}

func (t *WmiRegion) UnmarshalJSON(data []byte) error {
	return enumer.UnmarshalJSON(data, t, WmiRegions.Parse)
}

// /////////////////////////////////////////////////////////////////
//  WmiRegion YAML marshal/unmarshal implemenation
// /////////////////////////////////////////////////////////////////

func (t WmiRegion) MarshalYAML() (interface{}, error) {
	return enumer.MarshalYAML(t)
}

func (t *WmiRegion) UnmarshalYAML(unmarshal func(interface{}) error) error {
	return enumer.UnmarshalYAML(unmarshal, t, WmiRegions.Parse)
}

// /////////////////////////////////////////////////////////////////
//  WmiRegion SQL Database marshal/unmarshal implemenation
// /////////////////////////////////////////////////////////////////

func (t WmiRegion) Value() (driver.Value, error) {
	return enumer.Value(t)
}

func (t *WmiRegion) Scan(value interface{}) error {
	return enumer.Scan(value, t, WmiRegions.Parse)
}

// /////////////////////////////////////////////////////////////////
//
//  Enumeration
//
// /////////////////////////////////////////////////////////////////

type wmiRegions struct {
	Unassigned         WmiRegion
	SouthAfrica        WmiRegion
	CoteDIvoire        WmiRegion
	Angola             WmiRegion
	Kenya              WmiRegion
	Tanzania           WmiRegion
	Uganda             WmiRegion
	Benin              WmiRegion
	Madagascar         WmiRegion
	Tunisia            WmiRegion
	Egypt              WmiRegion
	Morocco            WmiRegion
	Zambia             WmiRegion
	Ethiopia           WmiRegion
	Mozambique         WmiRegion
	Ghana              WmiRegion
	Nigeria            WmiRegion
	SriLanka           WmiRegion
	Israel             WmiRegion
	SouthKorea         WmiRegion
	Jordan             WmiRegion
	China              WmiRegion
	India              WmiRegion
	Indonesia          WmiRegion
	Thailand           WmiRegion
	Myanmar            WmiRegion
	Mongolia           WmiRegion
	Kazakhstan         WmiRegion
	Iran               WmiRegion
	Pakistan           WmiRegion
	Turkey             WmiRegion
	Uzbekistan         WmiRegion
	Philippines        WmiRegion
	Singapore          WmiRegion
	Malaysia           WmiRegion
	Bangladesh         WmiRegion
	UnitedArabEmirates WmiRegion
	Taiwan             WmiRegion
	SaudiArabia        WmiRegion
	Vietnam            WmiRegion
	Hongkong           WmiRegion
	UnitedKingdom      WmiRegion
	Germany            WmiRegion
	Values             []WmiRegion
	Err                error
}

var WmiRegions = wmiRegions{
	Unassigned:         WmiRegion("Unassigned"),
	SouthAfrica:        WmiRegion("SouthAfrica"),
	CoteDIvoire:        WmiRegion("CoteDIvoire"),
	Angola:             WmiRegion("Angola"),
	Kenya:              WmiRegion("Kenya"),
	Tanzania:           WmiRegion("Tanzania"),
	Uganda:             WmiRegion("Uganda"),
	Benin:              WmiRegion("Benin"),
	Madagascar:         WmiRegion("Madagascar"),
	Tunisia:            WmiRegion("Tunisia"),
	Egypt:              WmiRegion("Egypt"),
	Morocco:            WmiRegion("Morocco"),
	Zambia:             WmiRegion("Zambia"),
	Ethiopia:           WmiRegion("Ethiopia"),
	Mozambique:         WmiRegion("Mozambique"),
	Ghana:              WmiRegion("Ghana"),
	Nigeria:            WmiRegion("Nigeria"),
	SriLanka:           WmiRegion("SriLanka"),
	Israel:             WmiRegion("Israel"),
	SouthKorea:         WmiRegion("SouthKorea"),
	Jordan:             WmiRegion("Jordan"),
	China:              WmiRegion("China"),
	India:              WmiRegion("India"),
	Indonesia:          WmiRegion("Indonesia"),
	Thailand:           WmiRegion("Thailand"),
	Myanmar:            WmiRegion("Myanmar"),
	Mongolia:           WmiRegion("Mongolia"),
	Kazakhstan:         WmiRegion("Kazakhstan"),
	Iran:               WmiRegion("Iran"),
	Pakistan:           WmiRegion("Pakistan"),
	Turkey:             WmiRegion("Turkey"),
	Uzbekistan:         WmiRegion("Uzbekistan"),
	Philippines:        WmiRegion("Philippines"),
	Singapore:          WmiRegion("Singapore"),
	Malaysia:           WmiRegion("Malaysia"),
	Bangladesh:         WmiRegion("Bangladesh"),
	UnitedArabEmirates: WmiRegion("UnitedArabEmirates"),
	Taiwan:             WmiRegion("Taiwan"),
	SaudiArabia:        WmiRegion("SaudiArabia"),
	Vietnam:            WmiRegion("Vietnam"),
	Hongkong:           WmiRegion("Hongkong"),
	UnitedKingdom:      WmiRegion("UnitedKingdom"),
	Germany:            WmiRegion("Germany"),
	Err:                fmt.Errorf("invalid WmiRegion"),
}

func init() {
	WmiRegions.Values = []WmiRegion{
		WmiRegions.Unassigned,
		WmiRegions.SouthAfrica,
		WmiRegions.CoteDIvoire,
		WmiRegions.Angola,
		WmiRegions.Kenya,
		WmiRegions.Tanzania,
		WmiRegions.Uganda,
		WmiRegions.Benin,
		WmiRegions.Madagascar,
		WmiRegions.Tunisia,
		WmiRegions.Egypt,
		WmiRegions.Morocco,
		WmiRegions.Zambia,
		WmiRegions.Ethiopia,
		WmiRegions.Mozambique,
		WmiRegions.Ghana,
		WmiRegions.Nigeria,
		WmiRegions.SriLanka,
		WmiRegions.Israel,
		WmiRegions.SouthKorea,
		WmiRegions.Jordan,
		WmiRegions.China,
		WmiRegions.India,
		WmiRegions.Indonesia,
		WmiRegions.Thailand,
		WmiRegions.Myanmar,
		WmiRegions.Mongolia,
		WmiRegions.Kazakhstan,
		WmiRegions.Iran,
		WmiRegions.Pakistan,
		WmiRegions.Turkey,
		WmiRegions.Uzbekistan,
		WmiRegions.Philippines,
		WmiRegions.Singapore,
		WmiRegions.Malaysia,
		WmiRegions.Bangladesh,
		WmiRegions.UnitedArabEmirates,
		WmiRegions.Taiwan,
		WmiRegions.SaudiArabia,
		WmiRegions.Vietnam,
		WmiRegions.Hongkong,
		WmiRegions.UnitedKingdom,
		WmiRegions.Germany,
	}
}

func (t wmiRegions) newErr(a any, values ...WmiRegion) error {
	return fmt.Errorf(
		"invalid %w value '%v'. Must be one of %v",
		WmiRegions.Err,
		a,
		enumer.Join(values, ", "),
	)
}

func (t wmiRegions) ParseFrom(v string, values ...WmiRegion) (WmiRegion, error) {
	var found WmiRegion
	var ok bool

	for _, value := range values {
		if enumer.IsEq[string, WmiRegion](v)(value) {
			found = value
			ok = true
			break
		}
	}

	if !ok {
		return found, t.newErr(v, values...)
	}

	return found, nil
}

func (t wmiRegions) Parse(v string) (WmiRegion, error) {
	return t.ParseFrom(v, WmiRegions.Values...)
}

func (t wmiRegions) IsFrom(v string, values ...WmiRegion) bool {
	for _, value := range values {
		if enumer.IsEq[string, WmiRegion](v)(value) {
			return true
		}
	}
	return false
}

func (t wmiRegions) Is(v string) bool {
	return t.IsFrom(v, WmiRegions.Values...)
}
