//************************************************************************************
//*                                                                                  *
//* ===== DO NOT EDIT =====                                                          *
//* Manual changes will be overwritten.                                              *
//* Generated by github.com/boundedinfinity/enumer                                   *
//*                                                                                  *
//************************************************************************************

package physical_card

import (
	"database/sql/driver"
	"fmt"

	"github.com/boundedinfinity/enumer"
)

type DonorStatus string

// /////////////////////////////////////////////////////////////////
//  DonorStatus Stringer implemenation
// /////////////////////////////////////////////////////////////////

func (t DonorStatus) String() string {
	return string(t)
}

// /////////////////////////////////////////////////////////////////
//  DonorStatus JSON marshal/unmarshal implemenation
// /////////////////////////////////////////////////////////////////

func (t DonorStatus) MarshalJSON() ([]byte, error) {
	return enumer.MarshalJSON(t)
}

func (t *DonorStatus) UnmarshalJSON(data []byte) error {
	return enumer.UnmarshalJSON(data, t, DonorStatuses.Parse)
}

// /////////////////////////////////////////////////////////////////
//  DonorStatus YAML marshal/unmarshal implemenation
// /////////////////////////////////////////////////////////////////

func (t DonorStatus) MarshalYAML() (interface{}, error) {
	return enumer.MarshalYAML(t)
}

func (t *DonorStatus) UnmarshalYAML(unmarshal func(interface{}) error) error {
	return enumer.UnmarshalYAML(unmarshal, t, DonorStatuses.Parse)
}

// /////////////////////////////////////////////////////////////////
//  DonorStatus SQL Database marshal/unmarshal implemenation
// /////////////////////////////////////////////////////////////////

func (t DonorStatus) Value() (driver.Value, error) {
	return enumer.Value(t)
}

func (t *DonorStatus) Scan(value interface{}) error {
	return enumer.Scan(value, t, DonorStatuses.Parse)
}

// /////////////////////////////////////////////////////////////////
//
//  Enumeration
//
// /////////////////////////////////////////////////////////////////

type donorStatuses struct {
	IsDonor  DonorStatus
	NotDonor DonorStatus
	Values   []DonorStatus
	Err      error
}

var DonorStatuses = donorStatuses{
	IsDonor:  DonorStatus("is-donor"),
	NotDonor: DonorStatus("not-donor"),
	Err:      fmt.Errorf("invalid DonorStatus"),
}

func init() {
	DonorStatuses.Values = []DonorStatus{
		DonorStatuses.IsDonor,
		DonorStatuses.NotDonor,
	}
}

func (t donorStatuses) newErr(a any, values ...DonorStatus) error {
	return fmt.Errorf(
		"invalid %w value '%v'. Must be one of %v",
		DonorStatuses.Err,
		a,
		enumer.Join(values, ", "),
	)
}

func (t donorStatuses) ParseFrom(v string, values ...DonorStatus) (DonorStatus, error) {
	var found DonorStatus
	var ok bool

	for _, value := range values {
		if enumer.IsEq[string, DonorStatus](v)(value) {
			found = value
			ok = true
			break
		}
	}

	if !ok {
		return found, t.newErr(v, values...)
	}

	return found, nil
}

func (t donorStatuses) Parse(v string) (DonorStatus, error) {
	return t.ParseFrom(v, DonorStatuses.Values...)
}

func (t donorStatuses) IsFrom(v string, values ...DonorStatus) bool {
	for _, value := range values {
		if enumer.IsEq[string, DonorStatus](v)(value) {
			return true
		}
	}
	return false
}

func (t donorStatuses) Is(v string) bool {
	return t.IsFrom(v, DonorStatuses.Values...)
}
