//************************************************************************************
//*                                                                                  *
//* ===== DO NOT EDIT =====                                                          *
//* Any change will be overwritten                                                   *
//* Generated by github.com/boundedinfinity/enumer                                   *
//*                                                                                  *
//************************************************************************************

package people

import (
	"database/sql/driver"
	"fmt"

	"github.com/boundedinfinity/enumer"
	"github.com/boundedinfinity/go-commoner/slicer"
)

// /////////////////////////////////////////////////////////////////
//  NameOrdering Stringer implemenation
// /////////////////////////////////////////////////////////////////

func (t NameOrdering) String() string {
	return string(t)
}

// /////////////////////////////////////////////////////////////////
//  NameOrdering JSON marshal/unmarshal implemenation
// /////////////////////////////////////////////////////////////////

func (t NameOrdering) MarshalJSON() ([]byte, error) {
	return enumer.MarshalJSON(t)
}

func (t *NameOrdering) UnmarshalJSON(data []byte) error {
	return enumer.UnmarshalJSON(data, t, NameOrderingEnum.Parse)
}

// /////////////////////////////////////////////////////////////////
//  NameOrdering YAML marshal/unmarshal implemenation
// /////////////////////////////////////////////////////////////////

func (t NameOrdering) MarshalYAML() (interface{}, error) {
	return enumer.MarshalYAML(t)
}

func (t *NameOrdering) UnmarshalYAML(unmarshal func(interface{}) error) error {
	return enumer.UnmarshalYAML(unmarshal, t, NameOrderingEnum.Parse)
}

// /////////////////////////////////////////////////////////////////
//  NameOrdering SQL Database marshal/unmarshal implemenation
// /////////////////////////////////////////////////////////////////

func (t NameOrdering) Value() (driver.Value, error) {
	return enumer.Value(t)
}

func (t *NameOrdering) Scan(value interface{}) error {
	return enumer.Scan(value, t, NameOrderingEnum.Parse)
}

// /////////////////////////////////////////////////////////////////
//
//  Enumeration
//
// /////////////////////////////////////////////////////////////////

var NameOrderingEnum = nameorderingEnum{}

type nameorderingEnum struct {
	name                string
	All                 []NameOrdering
	Err                 error
	GivenNameFamilyName NameOrdering
	FamilyNameGivenName NameOrdering
}

func init() {
	NameOrderingEnum.name = enumer.GetName[NameOrdering]()
	NameOrderingEnum.Err = fmt.Errorf("invalid %v", NameOrderingEnum.name)

	NameOrderingEnum.GivenNameFamilyName = NameOrdering("GivenNameFamilyName")
	NameOrderingEnum.FamilyNameGivenName = NameOrdering("FamilyNameGivenName")

	NameOrderingEnum.All = []NameOrdering{
		NameOrderingEnum.GivenNameFamilyName,
		NameOrderingEnum.FamilyNameGivenName,
	}
}

func (t nameorderingEnum) newErr(a any, values ...NameOrdering) error {
	return fmt.Errorf(
		"invalid %w value '%v'. Must be one of %v",
		t.Err, a, slicer.Join(values, ", "),
	)
}

func (t nameorderingEnum) ParseFrom(v string, values ...NameOrdering) (NameOrdering, error) {
	f, ok := slicer.FindFn(values, enumer.IsEq[string, NameOrdering](v))

	if !ok {
		return f, t.newErr(v, values...)
	}

	return f, nil
}

func (t nameorderingEnum) Parse(v string) (NameOrdering, error) {
	return t.ParseFrom(v, t.All...)
}

func (t nameorderingEnum) IsFrom(v string, values ...NameOrdering) bool {
	return slicer.ContainsFn(values, enumer.IsEq[string, NameOrdering](v))
}

func (t nameorderingEnum) Is(v string) bool {
	return t.IsFrom(v, t.All...)
}
