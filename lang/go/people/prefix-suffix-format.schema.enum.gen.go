//************************************************************************************
//*                                                                                  *
//* ===== DO NOT EDIT =====                                                          *
//* Any change will be overwritten                                                   *
//* Generated by github.com/boundedinfinity/enumer                                   *
//*                                                                                  *
//************************************************************************************

package people

import (
	"database/sql/driver"
	"fmt"

	"github.com/boundedinfinity/enumer"
	"github.com/boundedinfinity/go-commoner/slicer"
)

// /////////////////////////////////////////////////////////////////
//  PrefixSuffixFormat Stringer implemenation
// /////////////////////////////////////////////////////////////////

func (t PrefixSuffixFormat) String() string {
	return string(t)
}

// /////////////////////////////////////////////////////////////////
//  PrefixSuffixFormat JSON marshal/unmarshal implemenation
// /////////////////////////////////////////////////////////////////

func (t PrefixSuffixFormat) MarshalJSON() ([]byte, error) {
	return enumer.MarshalJSON(t)
}

func (t *PrefixSuffixFormat) UnmarshalJSON(data []byte) error {
	return enumer.UnmarshalJSON(data, t, PrefixSuffixFormatEnum.Parse)
}

// /////////////////////////////////////////////////////////////////
//  PrefixSuffixFormat YAML marshal/unmarshal implemenation
// /////////////////////////////////////////////////////////////////

func (t PrefixSuffixFormat) MarshalYAML() (interface{}, error) {
	return enumer.MarshalYAML(t)
}

func (t *PrefixSuffixFormat) UnmarshalYAML(unmarshal func(interface{}) error) error {
	return enumer.UnmarshalYAML(unmarshal, t, PrefixSuffixFormatEnum.Parse)
}

// /////////////////////////////////////////////////////////////////
//  PrefixSuffixFormat SQL Database marshal/unmarshal implemenation
// /////////////////////////////////////////////////////////////////

func (t PrefixSuffixFormat) Value() (driver.Value, error) {
	return enumer.Value(t)
}

func (t *PrefixSuffixFormat) Scan(value interface{}) error {
	return enumer.Scan(value, t, PrefixSuffixFormatEnum.Parse)
}

// /////////////////////////////////////////////////////////////////
//
//  Enumeration
//
// /////////////////////////////////////////////////////////////////

var PrefixSuffixFormatEnum = prefixsuffixformatEnum{}

type prefixsuffixformatEnum struct {
	name         string
	All          []PrefixSuffixFormat
	Err          error
	Full         PrefixSuffixFormat
	Abbreviation PrefixSuffixFormat
}

func init() {
	PrefixSuffixFormatEnum.name = enumer.GetName[PrefixSuffixFormat]()
	PrefixSuffixFormatEnum.Err = fmt.Errorf("invalid %v", PrefixSuffixFormatEnum.name)

	PrefixSuffixFormatEnum.Full = PrefixSuffixFormat("Full")
	PrefixSuffixFormatEnum.Abbreviation = PrefixSuffixFormat("Abbreviation")

	PrefixSuffixFormatEnum.All = []PrefixSuffixFormat{
		PrefixSuffixFormatEnum.Full,
		PrefixSuffixFormatEnum.Abbreviation,
	}
}

func (t prefixsuffixformatEnum) newErr(a any, values ...PrefixSuffixFormat) error {
	return fmt.Errorf(
		"invalid %w value '%v'. Must be one of %v",
		t.Err, a, slicer.Join(values, ", "),
	)
}

func (t prefixsuffixformatEnum) ParseFrom(v string, values ...PrefixSuffixFormat) (PrefixSuffixFormat, error) {
	f, ok := slicer.FindFn(values, enumer.IsEq[string, PrefixSuffixFormat](v))

	if !ok {
		return f, t.newErr(v, values...)
	}

	return f, nil
}

func (t prefixsuffixformatEnum) Parse(v string) (PrefixSuffixFormat, error) {
	return t.ParseFrom(v, t.All...)
}

func (t prefixsuffixformatEnum) IsFrom(v string, values ...PrefixSuffixFormat) bool {
	return slicer.ContainsFn(values, enumer.IsEq[string, PrefixSuffixFormat](v))
}

func (t prefixsuffixformatEnum) Is(v string) bool {
	return t.IsFrom(v, t.All...)
}
