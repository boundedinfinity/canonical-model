[[if .CurrNs -]]
package [[ .CurrNs | BASE | SNAKE ]]

[[end -]]

import (
[[if .HasValidation -]]
	"fmt"
[[- end ]]
    "github.com/boundedinfinity/rfc3339date"
)

[[if .Description -]]
// [[ .SchemaNs | BASE | PASCAL ]] [[ .Description ]]
[[end -]]
type [[ .SchemaNs | BASE | PASCAL ]] rfc3339date.Rfc3339Date

[[if .HasValidation -]]
// Validate validates the [[ .SchemaNs | BASE | PASCAL ]] type.
[[ end -]]
[[if .Before.Defined -]]
//         Before: [[ .Before ]]
[[ end -]]
[[if .After.Defined -]]
//         After: [[ .After ]]
[[end -]]
func (t [[ .SchemaNs | BASE | PASCAL ]]) Validate() error {
[[if .Before.Defined -]]
    if t.Before(before) {
        return fmt.Errorf("%v is before [[ .Before ]]", t)
    }

[[ end -]]
[[if .After.Defined -]]
    if t.After(after) {
        return fmt.Errorf("%v is after [[ .After ]]", t)
    }

[[end -]]
[[if .Within.Defined -]]
    if t.Within(within) {
        half := within / 2
	    before := time.Now().Add(half)
	    after := time.Now().Add(-half)
        return fmt.Errorf("%v after %v and before %v", t, before, after)
    }

[[end -]]

    return nil
}

var(
    [[if .Before.Defined -]]before rfc3339date.Rfc3339Date[[- end]]
    [[if .After.Defined -]]after rfc3339date.Rfc3339Date[[- end]]
    [[if .Within.Defined -]]within rfc3339date.Rfc3339Duration[[- end]]
)

[[if .HasValidation -]]
func init() {
    var err error
[[if .Before.Defined -]]
    before, err = rfc3339date.ParseDate("[[ .After ]]")

    if err != nil {
        panic(err)
    }
[[ end -]]
[[if .After.Defined -]]
    after, err = rfc3339date.ParseDate("[[ .After ]]")

    if err != nil {
        panic(err)
    }
[[ end -]]
[[if .Within.Defined -]]
    within, err = rfc3339date.ParseDate("[[ .Within ]]")

    if err != nil {
        panic(err)
    }
[[ end -]]
}
[[ end ]]